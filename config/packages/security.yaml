security:
    encoders:
        App\Entity\User:
            algorithm: argon2i

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    # TODO Ici on cree des exception de firewall, on peux donc uiliser api/user et login san etre connecte et on autorise que le poat pour la regisration avec methods
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        registration:
            pattern: ^/api/users
            anonymous: true
            stateless: true
            methods: [POST]

        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /api/login_check
                username_path: username
                password_path: password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        # TODO Ici on ferme lacces a lurl de l'api avec un firewall il faut donc etre connecte pour acceder au ressources !
        api:
            pattern:   ^/api
            stateless: true
            anonymous: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        
        main:
            anonymous: true
            #lazy: true
            #provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # TODOIci on affine lacces a l'api on permet lacces a la doc donc /api par contre on empeche les methodes get put delete, on laisse la methode post pour les users pour la creation
       # - { path: ^/api/users   , roles: IS_AUTHENTICATED_FULLY, methods: [GET, PUT, DELETE] }
        - { path: ^/api/favorite_movie   , roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/profile, roles: ROLE_USER }
